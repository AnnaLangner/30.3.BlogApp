{"version":3,"sources":["components/common/Logo/Logo.js","components/layout/MainMenu/MainMenu.js","components/features/NavBar/NavBar.js","components/layout/PageContainer/PageContainer.js","components/layout/MainLayout/MainLayout.js","components/common/PageTitle/PageTitle.js","config.js","redux/postsRedux.js","components/common/Button/Button.js","components/common/SmallTitle/SmallTitle.js","components/common/HtmlBox/HtmlBox.js","components/features/PostSummary/PostSummary.js","utils/cutText/cutText.js","components/features/PostsList/PostsList.js","components/common/Spinner/Spinner.js","components/common/Alert/Alert.js","components/common/Pagination/Pagination.js","components/features/Posts/Posts.js","components/features/Posts/PostsContainer.js","components/pages/Home/HomePage.js","components/features/PostsCounter/PostsCounter.js","components/features/PostsCounter/PostsCounterContainer.js","components/pages/Posts/PostsPage.js","components/pages/Contact/ContactPage.js","components/pages/NotFound/NotFoundPage.js","components/features/RandomPost/RandomPost.js","components/features/RandomPost/RandomPostContainer.js","components/pages/RandomPost/RandomPostPage.js","components/features/SinglePost/SinglePost.js","components/features/SinglePost/SinglePostContainer.js","components/pages/SinglePost/SinglePostPage.js","components/common/TextField/TextField.js","components/common/SectionTitle/SectionTitle.js","components/features/PostForm/PostForm.js","components/features/PostForm/PostFormContainer.js","components/pages/NewPost/NewPost.js","App.js","redux/store.js","index.js"],"names":["Logo","links","location","className","MainMenu","map","link","index","key","pathname","path","to","title","withRouter","props","NavBar","state","this","React","Component","PageContainer","children","MainLayout","PageTitle","API_URL","getPosts","posts","data","getRequest","request","getSinglePost","singlePost","getPages","Math","ceil","amount","postsPerPage","createActionName","name","LOAD_POSTS","LOAD_SINGLE_POST","LOAD_POSTS_PAGE","LOAD_RANDOM_POST","START_REQUEST","END_REQUEST","ERROR_REQUEST","RESET_REQUEST","loadPosts","payload","type","loadPostsByPage","startRequest","endRequest","errorRequest","error","resetRequest","initialState","pending","success","presentPage","Button","variant","otherProps","SmallTitle","HtmlBox","ReactHtmlParser","PostSummary","id","content","author","maxLength","length","substr","lastIndexOf","cutText","PostsList","post","Spinner","animationIn","animationOut","Alert","icon","Pagination","initialPage","changePage","newPage","onPageChange","setState","goToPage","increment","targetPage","pages","faChevronLeft","onClick","Array","el","page","faChevronRight","Posts","loadPostsPage","console","log","pagination","undefined","connect","dispatch","a","startAt","limit","axios","get","res","message","loadPostsByPageRequest","HomePage","PostsCounter","counter","PostsPage","ContactPage","NotFoundPage","RandomPost","loadRandomPost","RandomPostPage","SinglePost","loadPost","match","params","loadSinglePostRequest","SinglePostPage","TextField","value","label","onChange","SectionTitle","PostForm","handleChange","e","target","handleEditor","text","addPost","preventDefault","onSubmit","options","placeholder","toolbar","buttons","addPostRequest","NewPost","App","exact","component","Home","Contact","NotFound","rootReducer","combineReducers","statePart","action","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.62015911.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './Logo.scss';\r\n\r\nconst Logo = ({ links, location }) => (\r\n  <h1 className=\"logo\">Blog.app</h1>\r\n);\r\n\r\nexport default Logo;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { withRouter } from 'react-router-dom';\r\nimport './MainMenu.scss';\r\n\r\nconst MainMenu = ({ links, location }) => (\r\n  <ul className=\"main-menu\">\r\n    { links.map((link, index) =>\r\n      <li key={index}>\r\n        <Link className={(location.pathname === link.path && 'active') || ''} to={link.path}>{link.title}</Link>\r\n      </li>\r\n    )}\r\n  </ul>\r\n);\r\n\r\nMainMenu.propTypes = {\r\n  links: PropTypes.arrayOf(PropTypes.shape({\r\n    path: PropTypes.string.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n  })),\r\n};\r\n\r\nexport default withRouter(props => <MainMenu {...props}/>);\r\n","import React from 'react';\r\nimport Logo from '../../common/Logo/Logo';\r\nimport MainMenu from '../../layout/MainMenu/MainMenu';\r\nimport './NavBar.scss'\r\n\r\nclass NavBar extends React.Component {\r\n\r\n    state = {\r\n        links: [\r\n            { path: '/', title: 'Home' },\r\n            { path: '/posts/new', title: 'Add post' },\r\n            { path: '/posts/random', title: 'Random post' },\r\n            { path: '/posts', title: 'Posts' },\r\n            { path: '/contact', title: 'Contact' },\r\n        ],\r\n    };\r\n\r\n    render() {\r\n        const { links } = this.state;\r\n        return (\r\n            <nav className={'navbar'}>\r\n                <Logo />\r\n                <MainMenu links={links} />\r\n            </nav>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default NavBar;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageContainer.scss';\n\nconst PageContainer = ({ children }) => (\n  <div className=\"container-fluid\">\n    {children}\n  </div>\n);\n\nPageContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default PageContainer;\n","import React from 'react';\r\nimport NavBar from '../../features/NavBar/NavBar';\r\nimport PageContainer from \"../PageContainer/PageContainer\";\r\n\r\nconst MainLayout = ({ children }) => (\r\n    <div>\r\n        <PageContainer>\r\n            <NavBar />\r\n            {children}\r\n        </PageContainer>\r\n    </div>\r\n);\r\n\r\nexport default MainLayout;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './PageTitle.scss';\n\nconst PageTitle = ({ children }) => (\n  <h1 className=\"page-title\">\n     {children}\n  </h1>\n);\n\nPageTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default PageTitle;\n","export const API_URL = 'http://localhost:8000/api';","import axios from 'axios';\r\nimport { API_URL } from '../config';\r\n\r\n/* SELECTORS */\r\nexport const getPosts = ({ posts }) => posts.data;\r\nexport const getPostsCounter = ({ posts }) => posts.data.length;\r\nexport const getRequest = ({ posts }) => posts.request;\r\nexport const getSinglePost = ({ posts }) => posts.singlePost;\r\nexport const getPages = ({ posts }) => Math.ceil(posts.amount / posts.postsPerPage);\r\nexport const getPostsPerPage = ({ posts }) => posts.postsPerPage;\r\n\r\n/* ACTIONS */\r\n// action name creator\r\nconst reducerName = 'posts';\r\nconst createActionName = name => `app/${reducerName}/${name}`;\r\n\r\nexport const LOAD_POSTS = createActionName('LOAD_POSTS');\r\nexport const LOAD_SINGLE_POST = createActionName('LOAD_SINGLE_POST');\r\nexport const LOAD_POSTS_PAGE = createActionName('LOAD_POSTS_PAGE');\r\nexport const LOAD_RANDOM_POST = createActionName('LOAD_RANDOM_POST');\r\nexport const START_REQUEST = createActionName('START_REQUEST');\r\nexport const END_REQUEST = createActionName('END_REQUEST');\r\nexport const ERROR_REQUEST = createActionName('ERROR_REQUEST');\r\nexport const RESET_REQUEST = createActionName('RESET_REQUEST');\r\n\r\nexport const loadPosts = payload => ({ payload, type: LOAD_POSTS });\r\nexport const loadSinglePost = payload => ({payload, type: LOAD_SINGLE_POST});\r\nexport const loadPostsByPage = payload => ({payload, type: LOAD_POSTS_PAGE});\r\nexport const loadRandomPost = payload => ({ payload, type: LOAD_RANDOM_POST });\r\nexport const startRequest = () => ({ type: START_REQUEST });\r\nexport const endRequest = () => ({ type: END_REQUEST });\r\nexport const errorRequest = error => ({ error, type: ERROR_REQUEST });\r\nexport const resetRequest = () => ({ type: RESET_REQUEST });\r\n\r\n/* INITIAL STATE */\r\n\r\nconst initialState = {\r\n    data: [],\r\n    request: {\r\n        pending: false,\r\n        error: null,\r\n        success: null,\r\n    },\r\n    singlePost: null,\r\n    amount: 0,\r\n    postsPerPage: 10,\r\n    presentPage: 1,\r\n};\r\n\r\n/* THUNKS */\r\nexport const loadPostsRequest = () => {\r\n    return async dispatch => {\r\n        dispatch(startRequest());\r\n        try {\r\n            let res = await axios.get(`${API_URL}/posts`);\r\n            dispatch(loadPosts(res.data));\r\n            dispatch(endRequest());\r\n        } catch (e) {\r\n            dispatch(errorRequest(e.message));\r\n        }\r\n    };\r\n};\r\n\r\nexport const loadSinglePostRequest = (id) => {\r\n    return async dispatch => {\r\n        dispatch(startRequest());\r\n        try {\r\n            let res = await axios.get(`${API_URL}/posts/${id}`);\r\n            dispatch(loadSinglePost(res.data));\r\n            dispatch(endRequest());\r\n        } catch (e) {\r\n            dispatch(errorRequest(e.message));\r\n        }\r\n    };\r\n};\r\n\r\nexport const addPostRequest = (post) => {\r\n    return async dispatch => {\r\n        dispatch(startRequest());\r\n        try {\r\n            let res = await axios.post(`${API_URL}/posts`, post);\r\n            dispatch(loadPosts(res.data));\r\n            dispatch(endRequest());\r\n        } catch (e) {\r\n            dispatch(errorRequest(e.message));\r\n        }\r\n    };\r\n};\r\n\r\nexport const loadPostsByPageRequest = (page, postsPerPage) => {\r\n    return async dispatch => {\r\n        dispatch(startRequest());\r\n        try {\r\n            const startAt = (page - 1) * postsPerPage;\r\n            const limit = postsPerPage;\r\n\r\n            let res = await axios.get(`${API_URL}/posts/range/${startAt}/${limit}`);\r\n\r\n            const payload = {\r\n                posts: res.data.posts,\r\n                amount: res.data.amount,\r\n                postsPerPage,\r\n                presentPage: page,\r\n            };\r\n\r\n            dispatch(loadPostsByPage(payload));\r\n            dispatch(endRequest());\r\n        } catch (e) {\r\n            dispatch(errorRequest(e.message));\r\n        }\r\n    };\r\n};\r\n\r\nexport const loadRandomPostRequest = () => {\r\n    return async dispatch => {\r\n        dispatch(startRequest());\r\n        try {\r\n            let res = await axios.get(`${API_URL}/post/random`);\r\n            dispatch(loadRandomPost(res.data));\r\n            dispatch(endRequest());\r\n        } catch (e) {\r\n            dispatch(errorRequest(e.message));\r\n        }\r\n    };\r\n};\r\n\r\n/* REDUCER */\r\n\r\nexport default function reducer(statePart = initialState, action = {}) {\r\n    switch (action.type) {\r\n        case LOAD_POSTS:\r\n            return { ...statePart, data: action.payload };\r\n        case LOAD_SINGLE_POST:\r\n            return { ...statePart, singlePost: action.payload };\r\n        case LOAD_POSTS_PAGE:\r\n            return {\r\n                ...statePart,\r\n                postsPerPage: action.payload.postsPerPage,\r\n                presentPage: action.payload.presentPage,\r\n                amount: action.payload.amount,\r\n                data: [...action.payload.posts],\r\n            };\r\n        case LOAD_RANDOM_POST:\r\n            return { ...statePart, singlePost: action.payload};\r\n        case START_REQUEST:\r\n            return { ...statePart, request: { pending: true, error: null, success: null } };\r\n        case END_REQUEST:\r\n            return { ...statePart, request: { pending: false, error: null, success: true } };\r\n        case ERROR_REQUEST:\r\n            return { ...statePart, request: { pending: false, error: action.error, success: false } };\r\n        case RESET_REQUEST:\r\n            return { ...statePart, request: { pending: false, error: null, success: null } };\r\n        default:\r\n            return statePart;\r\n    }\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './Button.scss';\r\n\r\nconst Button = ({ variant = '', children, ...otherProps }) => (\r\n  <button { ...otherProps } className={ `button button--${variant}`}>\r\n    { children }\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Button;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './SmallTitle.scss';\n\nconst SmallTitle = ({ children, ...otherProps }) => (\n  <h2 {...otherProps} className=\"small-title\">\n    { children }\n  </h2>\n);\n\nSmallTitle.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default SmallTitle;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nconst HtmlBox = ({ children, ...otherProps}) => (\r\n    <p {...otherProps} className={'html-box'}>\r\n        {ReactHtmlParser(children)}\r\n    </p>\r\n);\r\n\r\nHtmlBox.propTypes = {\r\n    children: PropTypes.string,\r\n};\r\n\r\nexport default HtmlBox;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Button from '../../common/Button/Button';\r\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\r\nimport './PostSummary.scss';\r\nimport HtmlBox from \"../../common/HtmlBox/HtmlBox\";\r\nimport cutText from \"../../../utils/cutText/cutText\";\r\n\r\nconst PostSummary = ({ id, title, content, author }) => (\r\n    <article className={'post-summary'}>\r\n        <SmallTitle>{title}</SmallTitle>\r\n        <HtmlBox>{cutText(content, 250)}</HtmlBox>\r\n        <p> Author: {author}</p>\r\n        <Button variant={'primary'}><Link to={`/posts/${id}`}>\r\n            Read more\r\n        </Link></Button>\r\n    </article>\r\n);\r\n\r\nPostSummary.propTypes = {\r\n    id: PropTypes.string,\r\n    title: PropTypes.string,\r\n    content: PropTypes.string,\r\n    author: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default PostSummary;","export default (content, maxLength) => {\r\n    if(content.length < 1) return 'Error';\r\n    if(content.length <= maxLength) return content;\r\n    return content.substr(0, content.lastIndexOf(' ', maxLength)) + '...';\r\n};","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport PostSummary from '../PostSummary/PostSummary';\r\n\r\nconst PostsList = ({ posts }) => (\r\n    <div>\r\n        <section className={'posts-list'}>\r\n            {posts.map(post => <PostSummary key={post.id} {...post} />)}\r\n        </section>\r\n    </div>\r\n);\r\n\r\nPostsList.propTypes = {\r\n    posts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            content: PropTypes.string.isRequired,\r\n            author: PropTypes.string.isRequired,\r\n        })\r\n    )\r\n};\r\n\r\nexport default PostsList;","import React from 'react';\nimport { Animated } from 'react-animated-css';\n\nimport './Spinner.scss';\n\nconst Spinner = () => (\n  <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\n    <div className=\"lds-ellipsis\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  </Animated>\n);\n\nexport default Spinner;\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Animated } from 'react-animated-css';\r\nimport { MdInfoOutline, MdDone, MdErrorOutline } from 'react-icons/md';\r\n\r\nimport './Alert.scss';\r\n\r\nconst Alert = ({ variant = '', children, ...otherProps }) => {\r\n\r\n  const icon = () => {\r\n    switch(variant) {\r\n      case 'info':\r\n        return <MdInfoOutline />\r\n      case 'success':\r\n        return <MdDone />\r\n      case 'warning':\r\n        return <MdErrorOutline />\r\n      case 'error':\r\n        return <MdErrorOutline />\r\n      default:\r\n        return <MdInfoOutline />\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\">\r\n      <div {...otherProps} className={`alert alert--${variant}`}>\r\n        {icon()}\r\n        <span className=\"alert__desc\">{children}</span>\r\n      </div>\r\n    </Animated>\r\n  )\r\n\r\n};\r\n\r\nAlert.propTypes = {\r\n  variant: PropTypes.string.isRequired,\r\n  children: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronRight, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './Pagination.scss';\r\n\r\nclass Pagination extends React.Component {\r\n\r\n    state = {\r\n        presentPage: this.props.initialPage || 1\r\n    };\r\n\r\n    changePage = (newPage) => {\r\n        const { onPageChange } = this.props;\r\n\r\n        this.setState({ presentPage: newPage });\r\n        onPageChange(newPage);\r\n    };\r\n\r\n    goToPage = increment => {\r\n        const { presentPage } =this.state;\r\n        const { changePage } = this;\r\n        const { targetPage } = presentPage + increment;\r\n        changePage(targetPage);\r\n    };\r\n\r\n    render() {\r\n        const { pages } = this.props;\r\n        const { presentPage } = this.state;\r\n        const { changePage, goToPage } = this;\r\n\r\n        return (\r\n            <div className={'pagination'}>\r\n                <ul className={'pagination__list'}>\r\n\r\n                    {presentPage >= 2 && (\r\n                        <li className=\"pagination__list__item\">\r\n                            <FontAwesomeIcon\r\n                                icon={faChevronLeft}\r\n                                onClick={() => {\r\n                                    goToPage(-1);\r\n                                }}\r\n                            />\r\n                        </li>\r\n                    )}\r\n\r\n                    {[...Array(pages)].map((el, page) =>\r\n                    <li\r\n                        key={++page}\r\n                        onClick={() => { changePage(page) }}\r\n                        className={`pagination__list__item${((page) === presentPage) ? ' pagination__list__item--active' : ''}`}\r\n                    >\r\n                        {page}\r\n                    </li>\r\n                    )}\r\n\r\n                    {presentPage !== pages && (\r\n                        <li className=\"pagination__list__item\">\r\n                            <FontAwesomeIcon\r\n                                icon={faChevronRight}\r\n                                onClick={() => {\r\n                                    goToPage(1);\r\n                                }}\r\n                            />\r\n                        </li>\r\n                    )}\r\n\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPagination.propTypes = {\r\n    pages: PropTypes.number.isRequired,\r\n    initialPage: PropTypes.number,\r\n    onPageChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Pagination;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport PostsList from '../PostsList/PostsList';\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from \"../../common/Alert/Alert\";\r\nimport Pagination from '../../common/Pagination/Pagination';\r\n\r\nclass Posts extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { loadPostsByPage, initialPage, postsPerPage } = this.props;\r\n        console.log(postsPerPage, initialPage, 'test');\r\n        loadPostsByPage(initialPage || 1, postsPerPage || 10);\r\n    }\r\n\r\n    loadPostsPage = (page) => {\r\n        const { loadPostsByPage, postsPerPage } = this.props;\r\n        loadPostsByPage(page, postsPerPage || 10);\r\n    };\r\n\r\n    render() {\r\n        const { posts, request, pages, presentPage } = this.props;\r\n        let { pagination } = this.props;\r\n        const { loadPostsPage } = this;\r\n\r\n        if (pagination === undefined) {\r\n            pagination = true\r\n        }\r\n        if (request.pending === false && request.success === true && posts.length > 0) {\r\n            return (\r\n                <div>\r\n                    <PostsList posts={posts}/>\r\n                    { pagination && <Pagination pages={pages} onPageChange={loadPostsPage} initialPage={presentPage} /> }\r\n                </div>\r\n            );\r\n        } else if (request.pending === true || request.success === null) {\r\n            return (\r\n                <div>\r\n                    <Spinner/>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.error !== null) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'error'}>{request.error}</Alert>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.success === true && posts.length === 0) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>No posts</Alert>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>Something went wrong...</Alert>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nPosts.propTypes = {\r\n    posts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            content: PropTypes.string.isRequired,\r\n            author: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    loadPostsByPage: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Posts;","import { connect } from 'react-redux';\r\nimport {getPosts, getRequest, loadPostsByPageRequest, getPages} from '../../../redux/postsRedux';\r\nimport Posts from './Posts';\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: getPosts(state),\r\n    request: getRequest(state),\r\n    pages: getPages(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadPostsByPage: (page, postsPerPage) => dispatch(loadPostsByPageRequest(page, postsPerPage)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Posts);","import React from 'react';\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport Posts from '../../features/Posts/PostsContainer';\r\n\r\nconst HomePage = () => (\r\n    <div>\r\n        <PageTitle>Blog</PageTitle>\r\n        <Posts postsPerPage={3} pagination={false} />\r\n    </div>\r\n);\r\n\r\nexport default HomePage;","import React from 'react';\r\n\r\nclass PostsCounter extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const { loadPosts } = this.props;\r\n        loadPosts();\r\n    }\r\n\r\n    render() {\r\n        const { counter } = this.props;\r\n\r\n        return (\r\n            <div>{counter > 0 ? 'Posts amount: ' + counter : ' No posts '}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostsCounter;","import { connect } from 'react-redux';\r\nimport { getPosts, getPostsCounter, loadPostsRequest} from '../../../redux/postsRedux';\r\nimport PostsCounter from './PostsCounter';\r\n\r\nconst mapStateToProps = state => ({\r\n    posts: getPosts(state),\r\n    counter: getPostsCounter(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadPosts: () => dispatch(loadPostsRequest()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsCounter);","import React from 'react';\r\n\r\nimport PageTitle from '../../common/PageTitle/PageTitle';\r\nimport PostsCounter from '../../features/PostsCounter/PostsCounterContainer';\r\nimport Posts from '../../features/Posts/PostsContainer';\r\n\r\nconst PostsPage = () => (\r\n    <div>\r\n        <PageTitle>Posts list</PageTitle>\r\n        <PostsCounter />\r\n        <Posts />\r\n    </div>\r\n);\r\n\r\nexport default PostsPage;","import React from 'react';\r\nimport PageTitle from \"../../common/PageTitle/PageTitle\";\r\n\r\nconst ContactPage = () => (\r\n    <div>\r\n        <PageTitle>Contact</PageTitle>\r\n        <p>Your Favourite Blooger Ltd.</p>\r\n        <p>9432 Division Street</p>\r\n        <p> Stone Mountain, GA 30083</p>\r\n        <p>Mobile Number: 207-914-3411</p>\r\n    </div>\r\n);\r\n\r\nexport default ContactPage;","import React from 'react';\r\n\r\nconst NotFoundPage = () => (\r\n    <div>\r\n        <h1>404 Not Found</h1>\r\n    </div>\r\n);\r\n\r\nexport default NotFoundPage;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from \"../../common/Alert/Alert\";\r\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\r\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\r\n\r\nclass RandomPost extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const {loadRandomPost, resetRequest} = this.props;\r\n        loadRandomPost();\r\n        resetRequest();\r\n    }\r\n\r\n    render() {\r\n        const { post, request } = this.props;\r\n\r\n        if (request.pending === false && request.success === true && post) {\r\n            return (\r\n                <div>\r\n                    <article className={'post-summary'}>\r\n                        <SmallTitle>{post.title}</SmallTitle>\r\n                        <HtmlBox>{post.content}</HtmlBox>\r\n                        <p> Author: {post.author}</p>\r\n                    </article>\r\n                </div>\r\n            );\r\n        } else if (request.pending === true || request.success === null) {\r\n            return (\r\n                <div>\r\n                    <Spinner/>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.error !== null) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'error'}>{request.error}</Alert>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.success === true) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>No posts</Alert>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>Something went wrong...</Alert>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nRandomPost.propTypes = {\r\n    posts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            content: PropTypes.string.isRequired,\r\n            author: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    loadRandomPost: PropTypes.func.isRequired,\r\n    resetRequest: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withRouter(props => <RandomPost {...props}/>);","import { connect } from 'react-redux';\r\nimport {getSinglePost, getRequest, loadRandomPostRequest, resetRequest} from '../../../redux/postsRedux';\r\nimport RandomPost from \"./RandomPost\";\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    post: getSinglePost(state),\r\n    request: getRequest(state),\r\n\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadRandomPost: () => dispatch(loadRandomPostRequest()),\r\n    resetRequest: () => dispatch(resetRequest()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RandomPost);","import React from 'react';\r\nimport RandomPost from \"../../features/RandomPost/RandomPostContainer\";\r\n\r\nconst RandomPostPage = () => (\r\n    <div>\r\n        <RandomPost />\r\n    </div>\r\n);\r\n\r\nexport default RandomPostPage;","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n\r\nimport Spinner from '../../common/Spinner/Spinner';\r\nimport Alert from \"../../common/Alert/Alert\";\r\nimport HtmlBox from '../../common/HtmlBox/HtmlBox';\r\nimport SmallTitle from '../../common/SmallTitle/SmallTitle';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nclass SinglePost extends React.Component {\r\n\r\n    componentDidMount() {\r\n        const {loadPost, resetRequest, match} = this.props;\r\n        loadPost(match.params.id);\r\n        resetRequest();\r\n    }\r\n\r\n    render() {\r\n        const { post, request } = this.props;\r\n\r\n        if (request.pending === false && request.success === true && post ) {\r\n            return (\r\n                <div>\r\n                    <article>\r\n                        <SmallTitle>{post.title}</SmallTitle>\r\n                        <HtmlBox>{post.content}</HtmlBox>\r\n                        <p> Author: {post.author}</p>\r\n                    </article>\r\n                </div>\r\n            );\r\n        } else if (request.pending === true || request.success === null) {\r\n            return (\r\n                <div>\r\n                    <Spinner/>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.error !== null) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'error'}>{request.error}</Alert>\r\n                </div>\r\n            );\r\n        } else if (request.pending === false && request.success === true) {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>No posts</Alert>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Alert variant={'info'}>Something went wrong...</Alert>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nSinglePost.propTypes = {\r\n    posts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.string.isRequired,\r\n            title: PropTypes.string.isRequired,\r\n            content: PropTypes.string.isRequired,\r\n            author: PropTypes.string.isRequired,\r\n        })\r\n    ),\r\n    loadPost: PropTypes.func.isRequired,\r\n    resetRequest: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default withRouter(props => <SinglePost {...props}/>);","import { connect } from 'react-redux';\r\nimport {getSinglePost, getRequest, loadSinglePostRequest, resetRequest} from '../../../redux/postsRedux';\r\nimport SinglePost from \"./SinglePost\";\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    post: getSinglePost(state),\r\n    request: getRequest(state),\r\n\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loadPost: (id) => dispatch(loadSinglePostRequest(id)),\r\n    resetRequest: () => dispatch(resetRequest()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SinglePost);","import React from 'react';\r\nimport SinglePost from \"../../features/SinglePost/SinglePostContainer\";\r\n\r\nconst SinglePostPage = () => (\r\n    <div>\r\n        <SinglePost />\r\n    </div>\r\n);\r\n\r\nexport default SinglePostPage;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './TextField.scss';\r\n\r\nconst TextField = ({ value, label, onChange, ...otherProps }) => (\r\n  <label className=\"text-field\">\r\n    <span className={`text-field__label ${(!value.length > 0) ? 'text-field__label--big' : ''}`}>{label}</span>\r\n    <input {...otherProps} value={value} onChange={onChange} className=\"text-field__input\" />\r\n  </label>\r\n);\r\n\r\nTextField.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  label: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TextField;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './SectionTitle.scss';\r\n\r\nconst SectionTitle = ({ children }) => (\r\n  <h2 className=\"section-title\">\r\n     {children}\r\n  </h2>\r\n);\r\n\r\nSectionTitle.propTypes = {\r\n  children: PropTypes.string,\r\n};\r\n\r\nexport default SectionTitle;\r\n","import React from 'react';\r\nimport { PropTypes } from 'prop-types';\r\n//import { connect } from 'react-redux';\r\nimport Editor from 'react-medium-editor';\r\nimport 'medium-editor/dist/css/medium-editor.css';\r\nimport 'medium-editor/dist/css/themes/default.css';\r\n\r\nimport TextField from '../../common/TextField/TextField';\r\nimport SectionTitle from '../../common/SectionTitle/SectionTitle';\r\nimport Button from '../../common/Button/Button';\r\nimport Alert from \"../../common/Alert/Alert\";\r\nimport Spinner from \"../../common/Spinner/Spinner\";\r\n\r\nimport './PostForm.scss'\r\n\r\nclass PostForm extends React.Component {\r\n    state = {\r\n        post: {\r\n            title: '',\r\n            author: '',\r\n            content: ''\r\n        }\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { resetRequest } = this.props;\r\n        resetRequest();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const { post } = this.state;\r\n        this.setState({ post: { ...post, [e.target.name]: e.target.value }});\r\n    };\r\n\r\n    handleEditor = (text) => {\r\n        const { post } = this.state;\r\n        this.setState({ post: { ...post, content: text }});\r\n    };\r\n\r\n    addPost = (e) => {\r\n        const { addPost, resetRequest } = this.props;\r\n        const { post } = this.state;\r\n\r\n        e.preventDefault();\r\n        addPost(post);\r\n        resetRequest();\r\n    };\r\n\r\n    render() {\r\n        const { post } =this.state;\r\n        const { handleChange, handleEditor, addPost } = this;\r\n        const { request } = this.props;\r\n\r\n        if (request.error) return <Alert variant={'error'}>{request.error}</Alert>;\r\n        else if(request.success) return <Alert variant={'success'}>Post has been added!</Alert>;\r\n        else if (request.pending) return <Spinner/>;\r\n        else return (\r\n                <form onSubmit={addPost}>\r\n                    <TextField\r\n                        label={'Title'}\r\n                        onChange={handleChange}\r\n                        value={post.title}\r\n                        name={'title'}\r\n                    />\r\n                    <TextField\r\n                        label={'Author'}\r\n                        onChange={handleChange}\r\n                        value={post.author}\r\n                        name={'author'}\r\n                    />\r\n                    <SectionTitle>Edit post content</SectionTitle>\r\n                    <Editor\r\n                        className=\"content-editor\"\r\n                        text={post.content}\r\n                        onChange={handleEditor}\r\n                        options={{ placeholder: false, toolbar: { buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3'] } }}\r\n                    />\r\n                    <Button variant={'primary'}>Add post</Button>\r\n                </form>\r\n            );\r\n    }\r\n}\r\n\r\nPostForm.propTypes = {\r\n    request: PropTypes.object.isRequired,\r\n    addPost: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PostForm;","import { connect } from 'react-redux';\r\nimport { getRequest, addPostRequest, resetRequest } from '../../../redux/postsRedux';\r\nimport PostForm from './PostForm';\r\n\r\nconst mapStateProps = state => ({\r\n    request: getRequest(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addPost: (post) => dispatch(addPostRequest(post)),\r\n    resetRequest: () => dispatch(resetRequest()),\r\n});\r\n\r\nexport default connect(mapStateProps, mapDispatchToProps)(PostForm);","import React from 'react';\r\nimport PostForm from '../../features/PostForm/PostFormContainer';\r\n\r\nconst NewPost = () => (\r\n    <div>\r\n        <PostForm />\r\n    </div>\r\n);\r\n\r\nexport default NewPost;","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport MainLayout from './components/layout/MainLayout/MainLayout';\r\nimport Home from './components/pages/Home/HomePage';\r\nimport Posts from './components/pages/Posts/PostsPage';\r\nimport Contact from './components/pages/Contact/ContactPage';\r\nimport NotFound from './components/pages/NotFound/NotFoundPage';\r\nimport RandomPost from './components/pages/RandomPost/RandomPostPage'\r\nimport SinglePost from './components/pages/SinglePost/SinglePostPage.js';\r\nimport NewPost from './components/pages/NewPost/NewPost.js';\r\n\r\nclass App extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <MainLayout>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={Home} />\r\n                    <Route path=\"/posts\" exact component={Posts} />\r\n                    <Route path=\"/contact\" exact component={Contact} />\r\n                    <Route path=\"/posts/new\" exact component={NewPost} />\r\n                    <Route path=\"/posts/random\" exact component={RandomPost} />\r\n                    <Route path=\"/posts/:id\" exact component={SinglePost} />\r\n                    <Route component={NotFound} />\r\n                </Switch>\r\n            </MainLayout>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import { createStore, combineReducers, applyMiddleware, compose} from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\n//import reducers\r\nimport posts from './postsRedux';\r\n\r\n//combine reducers\r\nconst rootReducer = combineReducers({\r\n    posts,\r\n});\r\n\r\n//create store\r\nconst store = createStore(\r\n    rootReducer,\r\n    compose(\r\n        applyMiddleware(thunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\nimport App from './App';\r\nimport './styles/global.scss';\r\nimport 'animate.css/animate.min.css';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nconst Root = () => (\r\n    <Provider store={store}>\r\n        <Router>\r\n            <App/>\r\n        </Router>\r\n    </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));"],"sourceRoot":""}